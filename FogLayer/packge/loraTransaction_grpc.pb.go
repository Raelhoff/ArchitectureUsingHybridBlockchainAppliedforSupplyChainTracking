// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/loraTransaction.proto

package packge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoraTransactionClient is the client API for LoraTransaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoraTransactionClient interface {
	MakeTransaction(ctx context.Context, in *LoraRequest, opts ...grpc.CallOption) (*LoraResponse, error)
}

type loraTransactionClient struct {
	cc grpc.ClientConnInterface
}

func NewLoraTransactionClient(cc grpc.ClientConnInterface) LoraTransactionClient {
	return &loraTransactionClient{cc}
}

func (c *loraTransactionClient) MakeTransaction(ctx context.Context, in *LoraRequest, opts ...grpc.CallOption) (*LoraResponse, error) {
	out := new(LoraResponse)
	err := c.cc.Invoke(ctx, "/packge.LoraTransaction/MakeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoraTransactionServer is the server API for LoraTransaction service.
// All implementations must embed UnimplementedLoraTransactionServer
// for forward compatibility
type LoraTransactionServer interface {
	MakeTransaction(context.Context, *LoraRequest) (*LoraResponse, error)
	mustEmbedUnimplementedLoraTransactionServer()
}

// UnimplementedLoraTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedLoraTransactionServer struct {
}

func (UnimplementedLoraTransactionServer) MakeTransaction(context.Context, *LoraRequest) (*LoraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTransaction not implemented")
}
func (UnimplementedLoraTransactionServer) mustEmbedUnimplementedLoraTransactionServer() {}

// UnsafeLoraTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoraTransactionServer will
// result in compilation errors.
type UnsafeLoraTransactionServer interface {
	mustEmbedUnimplementedLoraTransactionServer()
}

func RegisterLoraTransactionServer(s grpc.ServiceRegistrar, srv LoraTransactionServer) {
	s.RegisterService(&LoraTransaction_ServiceDesc, srv)
}

func _LoraTransaction_MakeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraTransactionServer).MakeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packge.LoraTransaction/MakeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraTransactionServer).MakeTransaction(ctx, req.(*LoraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoraTransaction_ServiceDesc is the grpc.ServiceDesc for LoraTransaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoraTransaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packge.LoraTransaction",
	HandlerType: (*LoraTransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeTransaction",
			Handler:    _LoraTransaction_MakeTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loraTransaction.proto",
}

// ListLoraTransactionClient is the client API for ListLoraTransaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListLoraTransactionClient interface {
	MakeListTransaction(ctx context.Context, in *ListLoraRequest, opts ...grpc.CallOption) (*ListLoraResponse, error)
}

type listLoraTransactionClient struct {
	cc grpc.ClientConnInterface
}

func NewListLoraTransactionClient(cc grpc.ClientConnInterface) ListLoraTransactionClient {
	return &listLoraTransactionClient{cc}
}

func (c *listLoraTransactionClient) MakeListTransaction(ctx context.Context, in *ListLoraRequest, opts ...grpc.CallOption) (*ListLoraResponse, error) {
	out := new(ListLoraResponse)
	err := c.cc.Invoke(ctx, "/packge.ListLoraTransaction/MakeListTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListLoraTransactionServer is the server API for ListLoraTransaction service.
// All implementations must embed UnimplementedListLoraTransactionServer
// for forward compatibility
type ListLoraTransactionServer interface {
	MakeListTransaction(context.Context, *ListLoraRequest) (*ListLoraResponse, error)
	mustEmbedUnimplementedListLoraTransactionServer()
}

// UnimplementedListLoraTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedListLoraTransactionServer struct {
}

func (UnimplementedListLoraTransactionServer) MakeListTransaction(context.Context, *ListLoraRequest) (*ListLoraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeListTransaction not implemented")
}
func (UnimplementedListLoraTransactionServer) mustEmbedUnimplementedListLoraTransactionServer() {}

// UnsafeListLoraTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListLoraTransactionServer will
// result in compilation errors.
type UnsafeListLoraTransactionServer interface {
	mustEmbedUnimplementedListLoraTransactionServer()
}

func RegisterListLoraTransactionServer(s grpc.ServiceRegistrar, srv ListLoraTransactionServer) {
	s.RegisterService(&ListLoraTransaction_ServiceDesc, srv)
}

func _ListLoraTransaction_MakeListTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListLoraTransactionServer).MakeListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packge.ListLoraTransaction/MakeListTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListLoraTransactionServer).MakeListTransaction(ctx, req.(*ListLoraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListLoraTransaction_ServiceDesc is the grpc.ServiceDesc for ListLoraTransaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListLoraTransaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packge.ListLoraTransaction",
	HandlerType: (*ListLoraTransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeListTransaction",
			Handler:    _ListLoraTransaction_MakeListTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loraTransaction.proto",
}
